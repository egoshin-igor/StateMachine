<PROG> -> void main {~VTC.CreateTable <body> }~VTC.DestroyLastTable / void
<body> -> <declarations> <body___10000> / @@@,bool,char,float,int,IntArray,string
<body___10000> -> [EPS] / }
<body___10000> -> <operators> / #DecimalWholeNumber#,#BinaryWholeNumber#,for,if,#IDENTIFIER#,-,(,Print,Println
<declarations> -> <declarations_0> @@@ / @@@,bool,char,float,int,IntArray,string
<declarations_0> -> [EPS] / @@@
<declarations_0> -> <declaration> `~AO.Clear <declarations_0> / bool,char,float,int,IntArray,string
<declaration> -> <type> #IDENTIFIER#~VTC.DefineIdentifier / bool,char,float,int,IntArray,string
<type> -> bool~VTC.DefineNewType / bool
<type> -> char~VTC.DefineNewType / char
<type> -> float~VTC.DefineNewType / float
<type> -> int~VTC.DefineNewType / int
<type> -> IntArray~VTC.DefineNewType / IntArray
<type> -> string~VTC.DefineNewType / string
<operators> -> <operator> <operators___10000> / for,if,#IDENTIFIER#,#DecimalWholeNumber#,#BinaryWholeNumber#,-,(,Print,Println
<operators___10000> -> [EPS] / }
<operators___10000> -> <operators> / #DecimalWholeNumber#,#BinaryWholeNumber#,for,if,#IDENTIFIER#,-,(,Print,Println
<operator> -> <leftValue> = <rightValue> `~TC.CheckLeftRight  / #IDENTIFIER#
<operator> -> <ariphmeticalOperation> `~AO.Clear / #DecimalWholeNumber#,#BinaryWholeNumber#,-,(,#IDENTIFIER#
<operator> -> <print> `~AO.Clear / Print,Println

<print> -> Print~Print.Save ( <printValue> )~Print.GenerateNode / Print
<print> -> Println~Print.Save ( <printValue> )~Print.GenerateNode / Println
<printValue> -> #DecimalWholeNumber#~Print.Save / #DecimalWholeNumber#
<printValue> -> #IDENTIFIER#~Print.Save / #IDENTIFIER#
<printValue> -> [EPS] / )

<ariphmeticalOperation> -> <ariphmeticalOperation_0> <ariphmeticalOperation_1> / #DecimalWholeNumber#,#BinaryWholeNumber#,-,(,#IDENTIFIER#
<ariphmeticalOperation_0> -> <number> <mulArOp>~AO.ActionCreateUnaryMinusNode / #DecimalWholeNumber#,#BinaryWholeNumber#,-,(,#IDENTIFIER#
<mulArOp> -> *~AO.ActionAfterSign <number> <mulArOp>~AO.ActionAfterOperation / *
<mulArOp> -> div~AO.ActionAfterSign <number> <mulArOp>~AO.ActionAfterOperation / div
<mulArOp> -> [EPS] / +,`,-,)
<ariphmeticalOperation_1> -> +~AO.ActionAfterSign <ariphmeticalOperation_0> <ariphmeticalOperation_1>~AO.ActionAfterOperation / +
<ariphmeticalOperation_1> -> -~AO.ActionAfterSign <ariphmeticalOperation_0> <ariphmeticalOperation_1>~AO.ActionAfterOperation / -
<ariphmeticalOperation_1> -> [EPS] / `,)
<number> -> <number2> / #DecimalWholeNumber#,#BinaryWholeNumber#,#IDENTIFIER#
<number> -> (~AO.OpenBracketFound <ariphmeticalOperation> )~AO.ClosedBracketFound / (
<number> -> -~AO.UnaryMinusFoundAction <number> / -
<number2> -> #DecimalWholeNumber#~AO.ActionAfterNumber / #DecimalWholeNumber#
<number2> -> #BinaryWholeNumber#~AO.ActionAfterNumber / #BinaryWholeNumber#
<number2> -> #IDENTIFIER#~AO.ActionAfterNumber / #IDENTIFIER#

<leftValue> -> #IDENTIFIER#~TC.SaveLeftTerm / #IDENTIFIER#
<rightValue> -> <ariphmeticalOperation> / #DecimalWholeNumber#,#BinaryWholeNumber#,-,(,#IDENTIFIER#
