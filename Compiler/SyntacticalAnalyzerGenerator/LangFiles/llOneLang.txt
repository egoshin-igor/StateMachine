<PROG> -> void main {~VTC.CreateTable <body> }~VTC.DestroyLastTable / void
<body> -> <declarations> <body___10000> / @@@,bool,char,float,int,IntArray,string
<body___10000> -> [EPS] / }
<body___10000> -> <operators> / #DecimalWholeNumber#,#BinaryWholeNumber#,for,if,#IDENTIFIER#
<declarations> -> <declarations_0> @@@ / @@@,bool,char,float,int,IntArray,string
<declarations_0> -> [EPS] / @@@
<declarations_0> -> <declaration> ` <declarations_0> / bool,char,float,int,IntArray,string
<declaration> -> <type> #IDENTIFIER#~VTC.DefineIdentifier / bool,char,float,int,IntArray,string
<type> -> bool~VTC.DefineNewType / bool
<type> -> char~VTC.DefineNewType / char
<type> -> float~VTC.DefineNewType / float
<type> -> int~VTC.DefineNewType / int
<type> -> IntArray~VTC.DefineNewType / IntArray
<type> -> string~VTC.DefineNewType / string
<operators> -> <operator> <operators___10000> / for,if,#IDENTIFIER#,#DecimalWholeNumber#,#BinaryWholeNumber#
<operators___10000> -> [EPS] / }
<operators___10000> -> <operators> / #DecimalWholeNumber#,#BinaryWholeNumber#,for,if,#IDENTIFIER#
<operator> -> <for> / for
<operator> -> <if> / if
<operator> -> <leftValue> =~TC.SaveLeftTerm <rightValue> `~TC.CheckLeftRight  / #IDENTIFIER#
<operator> -> <ariphmeticalOperation> `~AO.Clear / #DecimalWholeNumber#,#BinaryWholeNumber#

<ariphmeticalOperation> -> <ariphmeticalOperation_0> <ariphmeticalOperation_1> / #DecimalWholeNumber#,#BinaryWholeNumber#
<ariphmeticalOperation_0> -> <number> <mulArOp> / #DecimalWholeNumber#,#BinaryWholeNumber#
<mulArOp> -> *~AO.ActionAfterSign <number> <mulArOp>~AO.ActionAfterOperation / *
<mulArOp> -> [EPS] / +,`
<ariphmeticalOperation_1> -> +~AO.ActionAfterSign <ariphmeticalOperation_0> <ariphmeticalOperation_1>~AO.ActionAfterOperation / +
<ariphmeticalOperation_1> -> [EPS] / `
<number> -> #DecimalWholeNumber#~AO.ActionAfterNumber / #DecimalWholeNumber#
<number> -> #BinaryWholeNumber#~AO.ActionAfterNumber / #BinaryWholeNumber#

<leftValue> -> <identOrIndexIdent> / #IDENTIFIER#
<rightValue> -> #DecimalWholeNumber#~TC.SaveLastTerm / #DecimalWholeNumber#
<rightValue> -> <boolOp> / false,true
<rightValue> -> <identOrIndexIdent> / #IDENTIFIER#
<identOrIndexIdent> -> #IDENTIFIER#~TC.SaveLastTerm <identOrIndexIdent___10000> / #IDENTIFIER#
<identOrIndexIdent___10000> -> [ <identOrIndexIdent___10000___10000>~Common.IsIntIndex / [
<identOrIndexIdent___10000> -> [EPS] / =,`
<identOrIndexIdent___10000___10000> -> #IDENTIFIER# <identOrIndexIdent___10000___10000___10000> / #IDENTIFIER#
<identOrIndexIdent___10000___10000___10000> -> - #DecimalWholeNumber# ]~TC.DefineArrElemType / -
<identOrIndexIdent___10000___10000___10000> -> ]~TC.DefineArrElemType / ]
<boolOp> -> false~TC.SaveLastTerm / false
<boolOp> -> true~TC.SaveLastTerm / true
<for> -> for ( #IDENTIFIER# = #DecimalWholeNumber# ` <boolStatement> ` #IDENTIFIER# + + ) {~VTC.CreateTable <body> }~VTC.DestroyLastTable / for
<if> -> if ( <boolStatement> ) {~VTC.CreateTable <body> }~VTC.DestroyLastTable / if
<while> -> while ( <boolStatement> ) {~VTC.CreateTable <body> }~VTC.DestroyLastTable / while
<boolStatement> -> <fieldOrIdent> <boolStatement___10000> / #IDENTIFIER#
<boolStatement___10000> -> [EPS] / `,)
<boolStatement___10000> -> <condition> <fieldOrIdent> / !,<,=,>
<condition> -> ! = / !
<condition> -> < / <
<condition> -> = = / =
<condition> -> > / >
<fieldOrIdent> -> #IDENTIFIER#~TC.SaveLastTerm <fieldOrIdent___10000> / #IDENTIFIER#
<fieldOrIdent___10000> -> . <fieldOrIdent>~TC.SaveLastTerm / .
<fieldOrIdent___10000> -> [EPS] / `,),!,<,=,>
